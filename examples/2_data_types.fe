
// Booleans
const x: bool = true
const x: bool = false

// Numbers
const x: uint8 = 0
const x: uint16 = 0
const x: uint32 = 0
const x: uint64 = 0
const x: uint128 = 0
const x: biguint = 0

const x: uint = 0 // `usize` in Rust

const x: byte = 0 // `byte` is alias for uint8

const x: int8 = 0
const x: int16 = 0
const x: int32 = 0
const x: int64 = 0
const x: int128 = 0
const x: bigint = 0

const x: int = 0 // `isize` in Rust

const x = 0 // numbers type-inference to int

const x: float32 = 0
const x: float64 = 0

const x: float = 1.2e3 // `float64`

// Characters
const x: char = 'a'

// Strings
const x: string = "Adam"
const x: string = "Adam {x}"

// Tuples
const x: (uint; 3) = (1, 2, 3)
const x: (uint?; 10) = (none; 10)
const x: (int, string, char) = (42, "Adam", 'F')

const y: int = x.0
const y: string = x.1
const y: char = x.2

// Lists
const x: [int] = [1, 2, 3]
const x: [int] = [i + 1 for i in 0..3]

// Optionals
const x: int? = none
const x: int? = some(123)
const x: int? = 123 // automagically wrapped in `some()`

const x: bool = none.is_some()
const x: bool = none.is_none()

const x: int = some(123).get_or_panic()
const x: int = none.get_or(0)
const x: int = none.get_or_else(() => 0)

const x: int = some(123)? // propogates up none, or panics if top-level

const x: int = none ?? 0
const x: int = none ?? () => 0

const x: string? = "abc"
const y: uint? = x?.length

const x: string? = "abc"
const y: uint = x?.length ?? 0

const x: int! = none.ok_or(err("uh oh!"))
const x: int! = none ?? err("uh oh!")
const x: int! = none.ok_or_else(() => err("uh oh!"))
const x = none ?? () => err("uh oh!")

const x: int! = none ?? err

// Results
const x: std::void! = ok()
const x: ! = ok() // default result type is `std::void`
const x: ! = ok
const x: ! = err

const x: int! = err("uh oh!")
const x: int = ok(123)
const x: int! = 123 // automagically wrapped in `ok()`

const x: bool = ok(123).is_ok()
const x: bool = ok(123).is_err()

const x: int? = ok(123).get_ok()
const x: std::Error? = ok(123).get_err()

let my_func = (): ! => {
  const x: int! = ok(123)
  const x: int = x!
}

my_func()!


