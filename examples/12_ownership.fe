class Person {
  state {
    pub let name: string,
    pub let age: uint,
  }

  pub self.requires_borrow() {}

  pub mut self.requires_borrow_mut() -> mut Self {
    return self
  }
}

struct House {
  owner: mut Person,
}

class Child {
  state {
    const parents: (Person; 2),
  }
}

const person1 = Person {
  name: "Adam",
  age: 25,
}

// move, `person1` is no longer available
const person2 = person1

// RC clones can happen when passing data into objects or functions (and it is later accessed)
// but not possible to RC clone a value in the current scope
// as there should be no need

log.info("{person2.name} is {person2.age} years old.")

const person1 = mut Person {
  name: "Adam",
  age: 25,
}

// move, `person1` is no longer available
const person2 = person1

// Won't compile because `person2` not `mutable`
// person2.age = 26;

const person1 = mut person2.clone()

person1.age = 26

log.info("{person2.name} is {person1.age} years old.")

person1.requires_borrow()
person1.requires_borrow_mut()

// --- //

const house1 = mut House { owner: person1 }

const house2 = House { owner: person2 }

// Won't compile because person2 is not mutable, and house3 & House::owner are mutable
// const house3 = mut House { owner: person2 }

house1.owner.age = 50

// Won't compile because house2 is not mutable
// house2.owner.age = 60

// --- //

const mom = Person { name: "Madeline", age: 52, }
const dad = Person { name: "Brian", age: 56, }

const adam = Child {
  parents: (mom, dad),
}

