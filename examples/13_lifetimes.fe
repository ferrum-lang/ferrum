class Person {
  state {
    public const name: string,
    public const age: uint,
  }
}

fn get_oldest_person(person1: Person, person2: Person) -> Person? {
  if person1.age > person2.age {
    return person1
  }

  if person1.age < person2.age {
    return person2
  }

  return none
}

function test_lifetimes(
  person1: Person,
  person2: Person,
  person3: Person,
  person4: Person,
  person5: Person,
) -> Person {
  return get_oldest_person(person2, person5) ?? PANIC
}

pub fn main() {
  {
    const person1 = Person { name: "Madison", age: 23, }
    const person2 = Person { name: "Adam", age: 25, }

    const oldest = get_oldest_person(person1, person2) ?? PANIC

    log.info("Oldest person is {oldest.name} at age {oldest.age}")
  }

  const person4 = Person { name: "four", age: 4 }
  const person3 = Person { name: "three", age: 3 }

  const res

  {
    const person2 = Person { name: "two", age: 2 }
    const person5 = Person { name: "five", age: 5 }

    {
      const person1 = Person { name: "one", age: 1 }

      res = test_lifetimes(
        person1,
        person2,
        person3,
        person4,
        person5,
      )
    }
  }

  // res still accessible here, even tho person2 and person5 (both used in return) are out of scope
  // this is handled using garbage collector
  log.info("Res: {res.name}")
}

