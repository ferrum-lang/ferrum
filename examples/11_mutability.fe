
class Person {
  state {
    public let name: string,
  }
}

fn test_person() {
  const person = Person { name: "Adam", }

  // Won't compile because immutable
  // person.name = "Adam Bates"

  // Won't compile because `const`
  // person = Person { name: "Adam Bates", }

  // --- //

  let person = Person { name: "Adam" }

  // Won't compile because immutable Person
  // person.name = "Adam Bates"

  // Compiles ok because `let`
  person = Person { name: "Adam Bates" }

  // Won't compile because `person` is not `mutable`
  // person = mut Person { name: "Adam Bates" }

  // --- //

  const person = mut Person { name: "Adam" }

  // Compiles ok because `mut` and `person.name` is stored under `let`
  person.name = "Adam Bates"

  // Won't compile because `const person`
  // person = Person { name: "Adam Bates", }

  // --- //

  let person = mut Person { name: "Adam" }

  // Compiles ok because `mut` and `person.name` is stored under `let`
  person.name = "Adam Bates"

  // Compiles ok because `let`
  person = mut Person { name: "Adam Bates" }

  // Won't compile because `person` is mutable
  // person = Person { name: "Adam Bates" }
}

class PartiallyMutableExample {
  state {
    public let first: string,
    public const second: string,
    public const third: mut Person,

    // Note: `const` but still `mutable`
    // This means `third` cannot be reassigned, but can still be mutated
  }
}

fn test_partial_mutable_example() {
  const person = mut Person { name: "Person" }

  const example = mut PartiallyMutableExample {
    first: "Adam",
    second: "Bates",
    third: person, // Note: `person` MUST be `mut` because `PartiallyMutableExample` is mutable here
  }

  example.first = "ADAM"
  
  // Won't compile.
  // Even though `example` is mutable, the underlying data is stored as `const`
  // example.second = "BATES"

  // Won't compile.
  // Even though `example` is mutable, the underlying data is stored as `const`
  // example.third = Person { name: "Other" }

  // Compiles ok because example.person is mutable.
  example.third.name = "Other"

  const person = Person { name: "Person" }

  const example = PartiallyMutableExample {
    first: "Adam",
    second: "Bates",
    third: person,
  }
}

class MutableExample {
  state {
    public let first: string,
    public let second: string,
  }
}

fn test_mutable_example() {
  const example = mut MutableExample {
    first: "Adam",
    second: "Bates",
  }

  example.first = "ADAM";
  example.second = "BATES";

  const example = MutableExample { first: "Adam", second: "Bates" }
}

immutable class ImmutableExample {
  state {
    public const first: string, // `let` and `mutable` are not allowed here because of `immutable`
    public const second: string,
  }
}

fn test_immutable_example() {
  const example = ImmutableExample {
    first: "Adam",
    second: "Bates",
  }

  // Won't compile because not `mut`
  // example.first = "ADAM"

  // Won't compile because `immutable`
  // const example = mut ImmutableExample { ... }
}

pub fn main() {
  test_person()
  test_partial_mutable_example()
  test_mutable_example()
  test_immutable_example()
}
