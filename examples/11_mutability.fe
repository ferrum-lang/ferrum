
structure Person {
  state {
    // Note: `string` can be stored under `let`,
    // but `string` cannot be marked `mutable` as it is an immutable structure
    public let name: string,
  }
}

function test_person() {
  const person = Person { name: "Adam", };

  // Won't compile because immutable
  // person.name = "Adam Bates";

  // Won't compile because `const`
  // person = Person { name: "Adam Bates", };

  // --- //

  let person = Person { name: "Adam" };

  // Won't compile because immutable Person
  // person.name = "Adam Bates";

  // Compiles ok because `let`
  person = Person { name: "Adam Bates" };

  // Won't compile because `person` is not `mutable`
  // person = mutable Person { name: "Adam Bates" };

  // --- //

  const person = mutable Person { name: "Adam" };

  // Compiles ok because `mutable` and `person.name` is stored under `let`
  person.name = "Adam Bates";

  // Won't compile because `const person`
  // person = Person { name: "Adam Bates", };

  // --- //

  let person = mutable Person { name: "Adam" };

  // Compiles ok because `mutable` and `person.name` is stored under `let`
  person.name = "Adam Bates";

  // Compiles ok because `let`
  person = mutable Person { name: "Adam Bates" };

  // Won't compile because `person` is `mutable`
  // person = Person { name: "Adam Bates" };
}

structure PartiallyMutableExample {
  state {
    public let first: string,
    public const second: string,

    // Note: `const` but still `mutable`
    // This means `third` cannot be reassigned, but can still be mutated
    public const third: mutable Person,
  }
}

function test_partial_mutable_example() {
  const person = mutable Person { name: "Person" };

  const example = mutable PartiallyMutableExample {
    first: "Adam",
    second: "Bates",
    third: person, // Note: `person` MUST be `mutable` because `PartiallyMutableExample` is mutable here
  };

  example.first = "ADAM";
  
  // Won't compile.
  // Even though `example` is mutable, the underlying data is stored as `const`
  // example.second = "BATES";

  // Won't compile.
  // Even though `example` is mutable, the underlying data is stored as `const`
  // example.third = Person { name: "Other" };

  // Compiles ok because example.person is mutable.
  example.third.name = "Other";

  const person = Person { name: "Person" };

  const example = PartiallyMutableExample {
    first: "Adam",
    second: "Bates",
    third: person,
  }
}

structure MutableExample {
  state {
    public let first: string,
    public let second: string,
  }
}

function test_mutable_example() {
  const example = mutable MutableExample {
    first: "Adam",
    second: "Bates",
  };

  example.first = "ADAM";
  example.second = "BATES";

  const example = MutableExample { first: "Adam", second: "Bates" };
}

immutable structure ImmutableExample {
  state {
    public const first: string, // `let` and `mutable` are not allowed here because of `immutable structure`
    public const second: string,
  }
}

function test_immutable_example() {
  const example = ImmutableExample {
    first: "Adam",
    second: "Bates",
  }

  // Won't compile because not `mutable`
  // example.first = "ADAM";

  // Won't compile because `immutable structure`
  // const example = mutable ImmutableExample { ... };
}

function main() {
  test_person();
  test_partial_mutable_example();
  test_mutable_example();
  test_immutable_example();
}
