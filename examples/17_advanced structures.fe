structure Device {
  state {
    let instance_id: std::UUID = std::UUID::from_seed(&serial),
    const serial: string,
    let is_active: bool = true,
    let is_legacy: bool = false,
  }

  // By default the constructor contains all fields
  // But when some or all fields are private it can be useful to provide an alternative constructor
  // Note: `instance_id` can be excluded from `constructor` because it has a default
  constructor { serial as name, is_active, is_legacy }

  // Generate getters for the following fields
  // Note: anything can be included or excluded from `get`
  get { serial as name, is_active, is_legacy }

  // Generate setters for the following fields
  // Note: `set` requires `let`, but `let` doesn't require `set`
  set { is_active }

  // Predefined functions to subscribe to
  // These functions never return anything, as they act as "listeners" to events
  subscribe {
    // `on_clone` will be called just after the instance is cloned using the `clone` keyword
    // Arguments are immutable borrowed source, and mutable borrowed clone
    on_clone: (source: Device, cloned: mutable Device) => {
      cloned.instance_id = std::UUID::from_seed(cloned.instance_id.to_string());
      Console::write_line("Cloned device {source.instance_id} into device {cloned.instance_id}");
    }

    // `on_share` will be called just after the instance is shared using the `share` keyword
    // Argument is immutable borrowed self
    on_share: (shared: Device) => {
      Console::write_line("Shared device {shared.instance_id}")
    }
  }
}

function main() {
  const inactive_legacy_device = Device {
    name: "1",
    is_active: false,
    is_legacy: true,
  };

  const legacy_device = Device {
    name: "2",
    is_legacy: true,
  };

  const inactive_device = Device {
    name: "3",
    is_active: false,
  };

  const device = Device {
    name: "4",
  };

  let x = clone device;

  let shared1 = &x;
  let shared2 = &x;
}
