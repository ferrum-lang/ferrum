const x = "abc"
log.info(x)

const y = 123

const x = "abc {y}"
log.info(x) // "abc 123"

const x = "abc \{y}"
log.info(x) // "abc {y}"

const x = "abc \\{y}"
log.info(x) // "abc \123"

const x = mut Sb::new()
x.append(" ")
x.prepend("abc")
x.append(y)
const x = x.build() // "abc 123"

const x = mut ""
x.append(" ")
x.prepend("abc")
x.append(y)
const x = x

// Notice how we can mutate the string without using `mut`,
// This is because the return value of `Sb::from` is implicitly mutable,
// And immutability is only set when assigned to a variable without the `mut` keyword
const x = " "
  .with_prepend("abc")
  .with_append(y) // "abc 123"

const z: [char] = x.get_chars()
const z: std::Iterator<char> = x.iter_chars()

const z: [byte] = x.get_bytes()
const z: std::Iterator<byte> = x.iter_bytes()

const z: uint = x.length
