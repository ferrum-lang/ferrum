import { fs } from "std"

type Row = [string]

pub struct Csv {
    headers: [string],
    rows: [Row],
}

pub errors CsvParseError { IO, Parse }

pub fn parse_csv(path: fs::Path) -> Csv! {
    const content = fs::read(path)
        .err_context(() => CsvParseError::IO("Couldn't read csv file.", { path }))!

    const [headers_str, ..rows_strs] = content.lines()

    const csv = mut Csv
    csv.headers = headers_str.split_by(",")

    if csv.headers.is_empty() {
        return CsvParseError::Parse("No headers found.", {
            path,
            content,
        })
    }

    csv.rows = rows_strs.map((rows_str, idx) => {
        const cols = rows_str.split_by(",")

        if cols.length != csv.headers.length {
            const csv_row = idx + 1 // account for headers

            return CsvParseError::Parse("csv row {csv_row} doesn't match csv headers", {
                path,
                content,
            })
        }

        return cols
    })!

    return csv
}

parse_csv("some/invalid/path")!
/*
CsvParseError::IO: Couldn't read csv file.
    path: "some/invalid/path",

    ./src/18_errors.fe at line 46

        parse_csv("some/invalid/path")!


    ./src/18_errors.fe at lines 13-14
    
        const content = fs::read(path)
            .err_context(() => CsvParseError::IO("Couldn't read csv file.", { path }))!


Caused by:
    std::fs::IOError: Couldn't read file: "some/invalid/path"

Caused by:
    std::error::OSError: File not found (os error 2)

*/

parse_csv("./package.json")!
/*
CsvParseError::Parse: No headers found.
    path: "./package.json",
    content: "{
            \"dependencies\": [],
        }"
    
    ./src/18_errors.fe at line 70

        parse_csv("./package.json")!
    
    ./src/18_errors at lines 22-25

        return CsvParseError::Parse("No headers found.", {
            path,
            content,
        })
*/

match parse_csv("./mismatched_rows.csv") {
    ok(csv) => log.info("Parsed csv: {csv}"),
    err(CsvParseError::Parse(e)) where e.message.contains("match") => log.warn(e),
    _ => log.error(e),
}
/*
Warning: CsvParseError::Parse: csv row 0 doesn't match csv headers.
    path: "./mismatched_rows.csv",
    content: "A,B,C
        1,2,3",
    
    ./src/18_errors.fe at line 90

        match parse_csv("./mismatched_rows.csv") {

    ./src/18_errors.fe at lines 28-41

        csv.rows = rows_strs.map((rows_str, idx) => {
            const cols = rows_str.split_by(",")

            if cols.length != csv.headers.length {
                return CsvParseError::Parse("csv row {idx} doesn't match csv headers", {
                    path,
                    content,
                })
            }

            return cols
        })!

        [index: 0] ./src/18_errors.fe at lines 34-37

            return CsvParseError::Parse("csv row {idx} doesn't match csv headers", {
                path,
                content,
            })
*/

